#!/bin/bash
#
# postinstall-0.3  -  Post Installation Script
#
# Post Installation Script is a script which is developed for Manjaro Awesome
# WM respin, codenamed: Cesious. It's purpose is to provide an easy way for
# users to set up their system, get used to the keybindings, install drivers
# and download and install applications.
#
# Written by Culinax

source "${0%/*}/postinstall-data.sh"

PS3="> "

in_array() {
    local i
    for i in "${@:2}"; do
        [[ $i = "$1" ]] && return 0
    done
    return 1
}

slct() {
    if in_array "--" "$@"; then
        declare -A subopts subtitles
        local sub subtitle subopt
        until [[ $1 = "--" ]]; do
            IFS=: read -r sub subtitle subopt<<< "$1"
            subopts[$sub]=$subopt
            subtitles[$sub]=$subtitle
            shift
        done
        shift
    fi

    local title=$1
    shift

    local indent=0
    for app in "$@"; do
        (( ${#app} > indent )) && indent=${#app}
    done

    while true; do
        local idx=1
        print_title "$title"
        printf '%s\n' "Select the correct number to either enable or disable a selection. Applications"\
                      "marked with an * will be installed/reinstalled. Applications that are not marked"\
                      "will not be installed or will be removed."
        printf '\n%s\n\n' "0.    Proceed to next step"
        for app in "$@"; do
            printf "%-$((${##}+1))s %s %-${indent}s â”‚ %s\n" "${idx}." "${work_list[${app}]:- }" "$app" "${apps_descr[$app]}"
            ((idx++))
        done
        echo
        while true; do
            read -e -n ${##} -p "$PS3" REPLY

            if [[ $REPLY != [0-9]* ]]; then
                echo "Invalid option"
                continue
            elif (( 10#$REPLY == 0 )); then
                local quitslct=1
                clear
                break
            elif (( 10#$REPLY >= 1 && 10#$REPLY <= $# )); then
                opt=${!REPLY}
                if in_array "${opt}" "${!work_list[@]}"; then
                    unset work_list[${opt}]
                    if in_array "$opt" "${!subopts[@]}"; then
                        for app in ${subopts[$opt]}; do
                            if in_array "$app" "${!work_list[@]}"; then
                                unset work_list[$app]
                            fi
                        done
                    fi
                else
                    work_list[${opt}]="*"
                    if in_array "$opt" "${!subopts[@]}"; then
                        clear
                        slct "$title > ${subtitles[$opt]}" ${subopts[$opt]}
                    fi
                fi
                clear
                break
            else
                echo "Invalid option"
                continue
            fi
        done
        (( quitslct == 1 )) && quitslct=0 && break
    done
}

process_selections() {
    local installation=() removal=()
    for app in "${!work_list[@]}"; do
        if ! in_array "${app}" "${!installed_list[@]}"; then
            installation+=("${app,,}")
        fi
    done

    clear
    print_title "$1 > Installing"
    if (( ${#installation[@]} == 0 )); then
        printf '%s\n\n' "No applications listed for installation. Press [Return] to finish."
        while true; do
            read -s -n 1 -p "$PS3" input
            if [[ $input = "" ]]; then
                break
            else
                echo "Press [Return] to finish"
                continue
            fi
        done
    else
        if install_check i sudo pacman -S "${installation[@]}"; then
            for app in "${installation[@]}"; do
                installed_list[$app]=
            done
        fi
    fi

    for app in "${!installed_list[@]}"; do
        if ! in_array "${app}" "${!work_list[@]}"; then
            removal+=("${app,,}")
        fi
    done

    clear
    print_title "$1 > Removing"
    if (( ${#removal[@]} == 0 )); then
        printf '%s\n\n' "No applications listed for removal. Press [Return] to finish."
        while true; do
            read -s -n 1 -p "$PS3" input
            if [[ $input = "" ]]; then
                break
            else
                echo "Press [Return] to finish"
                continue
            fi
        done
    else
        if install_check r sudo pacman -Rns "${removal[@]}"; then
            for app in "${removal[@]}"; do
                unset installed_list[$app]
            done
        fi
    fi
}

install_check() {
    if [[ $1 = "i" ]]; then
        local todo="Installation"
    elif [[ $1 = "r" ]]; then
        local todo="Removal"
    fi

    if "${@:2}"; then
        while true; do
            printf '\n%s\n\n' "$todo finished successfully. Press [Return] to finish."
            while true; do
                read -s -n 1 -p "$PS3" input
                if [[ $input = "" ]]; then
                    return 0
                else
                    echo "Press [Return] to finish"
                    continue
                fi
            done
            break
        done
    else
        while true; do
            printf '%b\n' "\nIt seems like an error occured. Please analyze the output carefully to solve the problem."\
                          "Press [Return] to finish.\n"
            while true; do
                read -s -n 1 -p "$PS3" input
                if [[ $input = "" ]]; then
                    return 1
                else
                    echo "Press [Return] to finish"
                    continue
                fi
            done
            break
        done
    fi
}

print_title() {
    printf "\033[1;34mPost Installation Script%s\033[0m\n\n" "$@"
}

print_main() {
    printf '%b\n' "Welcome to Manjaro awesome WM Respin, codenamed: Cesious!\n"\
                  "The purpose of this Post Installation Script is to automate common tasks which"\
                  "should help you to get you started using your brand new installation.\n"\
                  "It is by no means mandatory to run this script, however it is recommended to go"\
                  "throught this script once, as it is a very helpful addition. It is recommended"\
                  "to start from the first step and then work your way down."
}

main() {
    while true; do
        clear
        print_title
        print_main
        printf '%b\n' "\n1. Quick Awesome WM starting guide (description + mouse/keybindings)"\
                      "2. Manjaro specific keybindings"\
                      "3. Rank mirrorlist, verifying keyrings, sync to the repositories and update"\
                      "4. Install drivers"\
                      "5. Install applications sorted by category"\
                      "r. Never display at boot again"\
                      "q. Quit\n"
        while true; do
            read -s -n 1 -p "$PS3" REPLY
            case "$REPLY" in
                1)  man awesome
                    clear
                    break
                    ;;
                2)  clear
                    documentation | less
                    clear
                    break
                    ;;
                3)  clear
                    rank_sync_update && synced=1
                    clear
                    break
                    ;;
                4)  if (( synced == 0 )); then
                        printf '%s\n' "Please run the third option first to avoid breaking your system due to partial"\
                                      "  updates"
                        continue
                    fi
                    clear
                    install_drivers
                    clear
                    break
                    ;;
                5)  clear
                    install_apps
                    clear
                    break
                    ;;
                r)  remove_from_startup
                    ;;
                q)  quit
                    ;;
                *)  echo "Invalid option"
                    continue
                    ;;
            esac
        done
    done
}

rank_sync_update(){
    print_title " > Rank Sync Update"

    sudo pacman-key --init
    sudo pacman-key --populate archlinux manjaro
    if sudo pacman-key -r 962DDE58 && sudo pacman-key --lsign-key 962DDE58; then
        local idx=1
        linenum=()
        while read -r line; do
            if [[ $line = "[infinality-bundle"* ]]; then
                local repo=1
            elif [[ $repo = 1 && $line = SigLevel* ]]; then
                linenum+=($idx)
                local repo=0
            fi
            (( idx++ ))
        done < "/etc/pacman.conf"
        
        for (( idx=${#linenum[@]}-1; idx>=0; idx-- )); do
            sudo sed -i "${linenum[idx]}d" /etc/pacman.conf
        done
    fi
    sudo pacman-mirrors -g
    sudo pacman -Syy manjaro-system pacman --needed 2>/dev/null
    install_check i sudo pacman -Su
}

install_drivers() {
    while true; do
        print_title " > Install Drivers"
        printf '%b\n' "Select the correct number of the driver you want to install.\n"\
                      "1. AUR support"\
                      "2. Graphics driver"\
                      "3. Multimedia support"\
                      "4. Printer drivers"\
                      "q. Quit\n"
        while true; do
            read -s -n 1 -p "$PS3" REPLY
            case "$REPLY" in
                1)  clear
                    install_aur
                    clear
                    break
                    ;;
                2)  clear
                    install_graphics
                    clear
                    break
                    ;;
                3)  clear
                    install_media
                    clear
                    break
                    ;;
                4)  clear
                    install_printer
                    clear
                    break
                    ;;
                q)  quitcat=1
                    clear
                    break
                    ;;
                *)  echo "Invalid Option"
                    continue
                    ;;
            esac
        done
        (( quitcat == 1 )) && quitcat=0 && break
    done
}

install_aur() {
    for app in "${apps_aur[@]}"; do
        work_list[$app]="*"
    done

    local subtitle=" > Install Drivers > AUR Support"
    slct "$subtitle" "${apps_aur[@]}"
    process_selections "$subtitle"
}

install_graphics() {
    print_title " > Install Drivers > Graphics Driver"
    printf '%b\n' "This option will install the correct graphics driver with the help of the"\
                  "Manjaro Hardware Detection tool. MHWD automatically detects your graphics card"\
                  "and installs the proper drivers for it. Please enter the correct number,"\
                  "depending whether you want the open-source (free) or the proprietary (non-free)"\
                  "drivers.\n"\
                  "1. Open-source drivers (free)"\
                  "2. Proprietary drivers (non-free)\n"
    while true; do
        read -s -n 1 -p "$PS3" REPLY
        case "$REPLY" in
            1)  clear
                print_title " > Install Drivers > Graphics Driver > Installing Free"
                install_check i sudo mhwd -a pci free 0300
                break
                ;;
            2)  clear
                print_title " > Install Drivers > Graphics Driver > Installing Nonfree"
                install_check i sudo mhwd -a pci nonfree 0300
                break
                ;;
            *)  echo "Invalid Option"
                continue
                ;;
        esac
    done
}

install_media() {
    for app in "${apps_media[@]}"; do
        work_list[$app]="*"
    done

    local subtitle=" > Install Drivers > AUR Support"
    slct "$subtitle" "${apps_media[@]}"
    process_selections "$subtitle"
}

install_printer() {
    for app in "${apps_printer[@]}"; do
        work_list[$app]="*"
    done

    local subtitle=" > Install Drivers > Printer Drivers"
    slct "$subtitle" "${apps_printer[@]}"
    process_selections "$subtitle"

    systemctl enable cups
    systemctl start cups
}

install_apps() {
    local subtitle=" > Install Applications"

    slct "$subtitle > Calendars" "${apps_cal[@]}"
    slct "$subtitle > CD/DVD Burners" "${apps_cddvd[@]}"
    slct "$subtitle > Chat Clients" "${apps_chat[@]}"
    slct "$subtitle > Email Clients" "${apps_email[@]}"
    slct "$subtitle > Graphic Manipulation" "${apps_graphic[@]}"
    slct "$subtitle > Image Viewers" "${apps_imgview[@]}"
    slct "$subtitle > IRC Clients" "${apps_irc[@]}"
    slct "Nautilus:Nautilus:${apps_nautilus[*]}"\
         "PCManFM:PCManFM:${apps_pcmanfm[*]}"\
         "SpaceFM:SpaceFM:${apps_spacefm[*]}"\
         "Thunar:Thunar:${apps_thunar[*]}"\
         -- "$subtitle > File Managers" "${apps_file[@]}"
    slct "MPD:MPD Clients:${apps_mpd[*]}"\
         -- "$subtitle > Music Players" "${apps_music[@]}"
    slct "$subtitle > Office Apps" "${apps_office[@]}"
    slct "$subtitle > PDF Readers" "${apps_pdf[@]}"
    slct "$subtitle > RSS Readers" "${apps_rss[@]}"
    slct "$subtitle > System Monitors" "${apps_sysmon[@]}"
    slct "$subtitle > Terminal Emulators" "${apps_term[@]}"
    slct "$subtitle > Text Editors" "${apps_text[@]}"
    slct "$subtitle > Torrent Clients" "${apps_torrent[@]}"
    slct "$subtitle > Utilities" "${apps_util[@]}"
    slct "$subtitle > Video Players" "${apps_video[@]}"
    slct "$subtitle > Web Browsers" "${apps_web[@]}"

    local installation=() removal=()
    for app in "${!work_list[@]}"; do
        if ! in_array "${app}" "${!installed_list[@]}"; then
            installation+=("$app")
        fi
    done
    (( ${#installation[@]} != 0 )) && slct "$subtitle > Review Installation List" "${installation[@]}"

    for app in "${!installed_list[@]}"; do
        if ! in_array "${app}" "${!work_list[@]}"; then
            removal+=("$app")
        fi
    done
    (( ${#removal[@]} != 0 )) && slct "$subtitle > Review Removal List" "${removal[@]}"

    process_selections "$subtitle"
}

remove_from_startup(){
    if grep -q "postinstall" "$HOME/.xinitrc"; then
        sed -i '/postinstall/d' "$HOME/.xinitrc"
        echo "Post Installation Script won't be shown after booting again."
    else
        echo "Post Installation Script was already removed from the start-up list."
    fi
}

quit() {
    while true; do
        read -s -n 1 -p "Are you sure you want to quit? [y/N] " yesno
        if [[ $yesno = [Yy] ]]; then
            printf '%b\n' "\n\nThank you for installing!\n"\
                          "If you'd want to run this script again later on, you can type 'postinstall' in"\
                          "your terminal.\n"\
                          "Quitting..."
            exit 0
        else
            echo
            break
        fi
    done
}

clear
print_title
print_main
printf '%b\n' "\nIt is necessary for this script that an internet conncetion is available. Please"\
              "make sure that you have a working connection before you continue. Press [Return]"\
              "to perform a connection check.\n"

declare -A work_list installed_list
pacman_query="$(pacman -Qq)"
for app in "${!apps_descr[@]}"; do
    if echo "$pacman_query" | grep -q "^${app,,}$"; then
        work_list[$app]="*"
        installed_list[$app]=
    fi
done

while true; do
    read -s -n 1 -p "$PS3" input
    if [[ $input = "" ]]; then
        if ping -q -w 1 -c 1 8.8.8.8 &> /dev/null; then
            echo "Connection check succeeded..."
            sleep 1
            main
        else
            printf '%s\n' "Connection check failed... Please connect to the internet and press [Return] to"\
                          "run a connection check again"
            continue
        fi
    else
        echo "Press [Return] to run a connection check"
        continue
    fi
done
